import { Telegraf, Markup } from "telegraf";
import baza from "./baza.json" assert { type: "json" };
import shuffle from "./shuffle.js";
import answerStik from "./answerStik.json" assert { type: "json" };
import { MongoClient } from "mongodb";
import dotenv from "dotenv";
dotenv.config();

const token = "7919809731:AAHR9IPjbFtZondrgGKtZrP5d6L_b_vsTvA";
const mongo_URL = "mongodb://localhost:27017/Kruki";
const bot = new Telegraf(token);

// –ù–∞—á–∞–ª–æ –±–∞–∑—ã
let db;
async function connectDB() {
  try {
    const client = new MongoClient(mongo_URL);
    await client.connect();
    db = client.db("Kruki");
    console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:", error);
  }
}

async function saveTestResult(userId, correctAnswers) {
  try {
    const collection = db.collection("user_results");

    const existingUser = await collection.findOne({ userId });

    if (existingUser) {
      await collection.updateOne({ userId }, { $set: { correctAnswers } });
      console.log(`üìÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    } else {
      await collection.insertOne({ userId, correctAnswers });
      console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ MongoDB:", error);
  }
}

async function getTestResult(userId) {
  try {
    const collection = db.collection("user_results");
    const userResult = await collection.findOne({ userId });
    if (userResult) {
      return userResult.correctAnswers; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    } else {
      return null; // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ MongoDB:", error);
    return null;
  }
}
// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö

bot.start((ctx) => {
  return ctx.reply("–ü—Ä–∏–≤–µ—Ç, –¥–∞–≤–∞–π –∏–∑—É—á–∞—Ç—å –∫—Ä—é–∫–∏!", {
    reply_markup: {
      inline_keyboard: keyboard,
    },
  });
});

const keyboard = [[{ text: "–¢–µ—Å—Ç—ã", callback_data: "button_test" }]];

const userProgress = {};

bot.command("test", (ctx) => {
  return ctx.reply("–¢–µ—Å—Ç—ã", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–¢–µ—Å—Ç 1", callback_data: "button_click" }],
        [{ text: "–ú–æ–∏ —Ç–µ—Å—Ç—ã", callback_data: "button_result" }],
      ],
    },
  });
});

bot.on("callback_query", async (ctx) => {
  const userId = ctx.from.id;
  const buttonData = ctx.callbackQuery.data;

  if (buttonData === "button_test") {
    return ctx.reply("–¢–µ—Å—Ç—ã", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–¢–µ—Å—Ç 1", callback_data: "button_click" }],
          [{ text: "–ú–æ–∏ —Ç–µ—Å—Ç—ã", callback_data: "button_result" }],
        ],
      },
    });
  }

  if (buttonData === "button_result") {
    const correctAnswers = await getTestResult(userId);

    if (correctAnswers !== null) {
      ctx.reply(
        `–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –¢–µ—Å—Ç 1: ${correctAnswers} –∏–∑ ${baza.length}`
      );
    } else {
      ctx.reply("–¢—ã –µ—â–µ –Ω–µ –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç.");
    }
    return;
  }

  if (buttonData === "button_click") {
    if (!userProgress[userId]) {
      userProgress[userId] = {
        progress: 0,
        numTrueAnswer: 0,
      };
    }

    userProgress[userId].progress = 0;
    userProgress[userId].numTrueAnswer = 0;
  }

  if (buttonData === "true_answer") {
    userProgress[userId].numTrueAnswer++;
    userProgress[userId].progress++;
  }

  if (
    buttonData === "false_2" ||
    buttonData === "false_3" ||
    buttonData === "false_4"
  ) {
    userProgress[userId].progress++;
  }

  if (userProgress[userId].progress < baza.length) {
    sendQuestion(ctx, userId);
  } else {
    ctx.reply("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!");

    saveTestResult(userId, userProgress[userId].numTrueAnswer);

    if (
      userProgress[userId].numTrueAnswer >= 0 &&
      userProgress[userId].numTrueAnswer <= 4
    ) {
      ctx.reply(
        `–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ ${userProgress[userId].numTrueAnswer} –∏–∑ ${baza.length}`
      );
      ctx.replyWithSticker(answerStik.id_0_4);
    } else if (
      userProgress[userId].numTrueAnswer >= 5 &&
      userProgress[userId].numTrueAnswer <= 7
    ) {
      ctx.reply(
        `–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ ${userProgress[userId].numTrueAnswer} –∏–∑ ${baza.length}`
      );
      ctx.replyWithSticker(answerStik.id_5_7);
    } else if (
      userProgress[userId].numTrueAnswer >= 8 &&
      userProgress[userId].numTrueAnswer <= 9
    ) {
      ctx.reply(
        `–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ ${userProgress[userId].numTrueAnswer} –∏–∑ ${baza.length}`
      );
      ctx.replyWithSticker(answerStik.id_8_9);
    } else if (userProgress[userId].numTrueAnswer == 10) {
      ctx.reply(
        `–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ ${userProgress[userId].numTrueAnswer} –∏–∑ ${baza.length}`
      );
      ctx.replyWithSticker(answerStik.id_10);
    }
    delete userProgress[userId];
  }
});

function sendQuestion(ctx, userId) {
  const question = baza[userProgress[userId].progress];
  const answer = [
    [
      { text: question.answer[2], callback_data: "false_3" },
      { text: question.answer[3], callback_data: "false_4" },
    ],
    [
      { text: question.answer[0], callback_data: "true_answer" },
      { text: question.answer[1], callback_data: "false_2" },
    ],
  ];
  const mixer0 = shuffle(answer[0]);
  const mixer1 = shuffle(answer[1]);
  ctx.replyWithSticker(question.sticker);
  setTimeout(() => {
    ctx.reply(question.text, {
      reply_markup: {
        inline_keyboard: [mixer1, mixer0],
      },
    });
  }, 300);
}

(async () => {
  await connectDB();
  bot.launch();
  console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
})();
