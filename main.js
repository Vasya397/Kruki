import { Telegraf, Markup } from "telegraf";
import baza from "./baza.json" assert { type: "json" };
import shuffle from "./shuffle.js";
import answerStik from "./answerStik.json" assert { type: "json" };
import { MongoClient } from "mongodb";
import dotenv from "dotenv";
import Lesson_1 from './Lessons/Lesson_1.js'

dotenv.config();

const token = "7919809731:AAHR9IPjbFtZondrgGKtZrP5d6L_b_vsTvA";
const mongo_URL = "mongodb://localhost:27017/Kruki";
const bot = new Telegraf(token);

// –ù–∞—á–∞–ª–æ –±–∞–∑—ã
let db;
async function connectDB() {
  try {
    const client = new MongoClient(mongo_URL);
    await client.connect();
    db = client.db("Kruki");
    console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:", error);
  }
}

async function saveTestResult(userId, correctAnswers) {
  try {
    const collection = db.collection("user_results");

    const existingUser = await collection.findOne({ userId });

    if (existingUser) {
      await collection.updateOne({ userId }, { $set: { correctAnswers } });
      console.log(`üìÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    } else {
      await collection.insertOne({ userId, correctAnswers });
      console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ MongoDB:", error);
  }
}
// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö

bot.start((ctx) => {
  return ctx.reply("–ü—Ä–∏–≤–µ—Ç, –¥–∞–≤–∞–π –∏–∑—É—á–∞—Ç—å –∫—Ä—é–∫–∏! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è –Ω–∞ –∑–Ω–∞–Ω–∏–µ –∫—Ä—é–∫–æ–≤ –∏ –ø—Ä–æ–π—Ç–∏ –º–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤ –∏–ª–∏ –ø—Ä–æ–π—Ç–∏ –º–Ω–æ–≥–æ —É—Ä–æ–∫–æ–≤ –æ –∫—Ä—é–∫–∞—Ö)", {
    reply_markup: {
      inline_keyboard: [[{ text: "–¢–µ—Å—Ç—ã", callback_data: "button_test" },{ text: "–£—Ä–æ–∫–∏", callback_data: "lessons" }]],
    },
  });
});

const userProgress = {};

bot.command("test", (ctx) => {
  return ctx.reply("–ó–¥–µ—Å—å –∏–º–µ–µ—Ç—Å—è –º–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤!! –ü—Ä–æ—Ö–æ–¥–∏ –∏—Ö —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –∫–∞–∫ —Ö–æ—Ä–æ—à–æ —Ç—ã –∑–Ω–∞–µ—à—å –∫—Ä—é–∫–∏)üéºüéº", {
    reply_markup: {
      inline_keyboard: [[{ text: "–¢–µ—Å—Ç 1", callback_data: "test_1" },{ text: "–¢–µ—Å—Ç 2", callback_data: "test_2" }]],
    },
  });
});

bot.command("kruki", (ctx) => {
  return ctx.reply("–ö–†–Æ–ö–òÃÅ (–∑–Ω–∞¬≠–º—ë¬≠–Ω–∞), –∑–Ω–∞¬≠–∫–∏, –±–µ–∑¬≠–ª–∏¬≠–Ω–µ–π¬≠–Ω—ã—Ö –ø–µ–≤¬≠—á–µ¬≠—Å–∫–∏—Ö –Ω–æ¬≠—Ç–∞¬≠—Ü–∏–π. –ö—Ä—é¬≠–∫–æ¬≠–≤–∞—è (–ø–æ –Ω–∞–∑–≤. –æ–¥¬≠–Ω–æ¬≠–≥–æ –∏–∑ –æ—Å–Ω. –∑–Ω–∞¬≠–∫–æ–≤ ‚Äì –∫—Ä—é¬≠–∫–∞), –æ–Ω–∞ –∂–µ —Å—Ç–æ–ª¬≠–ø–æ¬≠–≤–∞—è, –∏–ª–∏ –∑–Ω–∞¬≠–º–µ–Ω¬≠–Ω–∞—è, –Ω–æ¬≠—Ç–∞¬≠—Ü–∏—è –≤–µ¬≠–¥—ë—Ç —Å–≤–æ—ë –ø—Ä–æ¬≠–∏—Å¬≠—Ö–æ¬≠–∂¬≠–¥–µ¬≠–Ω–∏–µ –æ—Ç —Ä–∞–Ω¬≠–Ω–µ¬≠–≤–∏¬≠–∑–∞–Ω¬≠—Ç–∏–π¬≠—Å–∫–æ–π –Ω–æ¬≠—Ç–∞¬≠—Ü–∏–∏ –∏ —è–≤¬≠–ª—è¬≠–µ—Ç¬≠—Å—è –æ—Å–Ω. —Ñ–æ—Ä¬≠–º–æ–π –¥—Ä.-—Ä—É—Å. –º—É–∑. –ø–∏—Å—å¬≠–º–µ–Ω¬≠–Ω–æ¬≠—Å—Ç–∏. –ï—ë –æ—Ç–¥. –∑–Ω–∞¬≠–∫–∏ —Å–æ¬≠—Ö—Ä–∞¬≠–Ω–∏¬≠–ª–∏ –≥—Ä–µ—á. –Ω–∞¬≠–∑–≤–∞¬≠–Ω–∏—è (–Ω–∞–ø—Ä., –ø–∞¬≠—Ä–∞¬≠–∫–ª–∏—Ç). –ë–æ–ª—å¬≠—à–∏–Ω¬≠—Å—Ç¬≠–≤–æ –∑–Ω–∞¬≠–∫–æ–≤ –ø–æ¬≠–ª—É¬≠—á–∏¬≠–ª–æ —Ä—É—Å. –Ω–∞¬≠–∑–≤–∞¬≠–Ω–∏—è, —Å–≤—è¬≠–∑–∞–Ω¬≠–Ω—ã–µ —Å –∏—Ö –≤–Ω–µ—à¬≠–Ω–∏–º –≤–∏¬≠–¥–æ–º: –ø–∞–ª¬≠–∫–∞, —Å—Ç—Ä–µ¬≠–ª–∞, –∑–∞¬≠–ø—è¬≠—Ç–∞—è –∏ —Ç. –ø. –í —Ä–∞–∑¬≠–≤–∏¬≠—Ç–∏–∏ –∫—Ä—é¬≠–∫–æ¬≠–≤–æ–π –Ω–æ¬≠—Ç–∞¬≠—Ü–∏–∏ –≤—ã¬≠–¥–µ¬≠–ª—è¬≠—é—Ç 3 –ø–µ¬≠—Ä–∏–æ¬≠–¥–∞: —Ä–∞–Ω¬≠–Ω–∏–π (11‚Äì14 –≤–≤.), —Å—Ä–µ–¥¬≠–Ω–∏–π (15 ‚Äì –Ω–∞—á. 17 –≤–≤.) –∏ –ø–æ–∑–¥¬≠–Ω–∏–π (—Å —Å–µ—Ä. 17 –≤.). –ù–æ¬≠—Ç–∞¬≠—Ü–∏—è –ø–µ—Ä¬≠–≤—ã—Ö 2 –ø–µ¬≠—Ä–∏–æ¬≠–¥–æ–≤ –≤ —Å–æ¬≠—á–µ¬≠—Ç–∞¬≠–Ω–∏–∏ —Å –º–æ¬≠–ª–∏—Ç¬≠–≤–æ¬≠—Å–ª–æ–≤¬≠–Ω—ã–º —Ç–µ–∫¬≠—Å—Ç–æ–º –ø–æ¬≠–∑–≤–æ¬≠–ª—è¬≠–µ—Ç —Å—É¬≠–¥–∏—Ç—å –æ —Ä–∏—Ç¬≠–º–µ –ø–µ—Å¬≠–Ω–æ¬≠–ø–µ¬≠–Ω–∏–π, –Ω–æ –∏—Ö –∑–≤—É¬≠–∫–æ¬≠–≤—ã¬≠—Å–æ—Ç¬≠–Ω–∞—è —Å–æ¬≠—Å—Ç–∞–≤¬≠–ª—è—é¬≠—â–∞—è –Ω–µ –ø–æ–¥¬≠–¥–∞¬≠—ë—Ç¬≠—Å—è –¥–µ¬≠—à–∏—Ñ¬≠—Ä–æ–≤¬≠–∫–µ. –í 17 –≤. –≤ –Ω–æ¬≠—Ç–∞¬≠—Ü–∏–∏ –ø–æ—è¬≠–≤–∏¬≠–ª–∞—Å—å –ª–∞¬≠–¥–æ–∑¬≠–≤—É¬≠–∫–æ¬≠—Ä—è–¥¬≠–Ω–∞—è –æ–ø¬≠—Ä–µ¬≠–¥–µ¬≠–ª—ë–Ω¬≠–Ω–æ—Å—Ç—å –±–ª–∞¬≠–≥–æ¬≠–¥–∞¬≠—Ä—è –∫–∏¬≠–Ω–æ¬≠–≤–∞—Ä¬≠–Ω—ã–º –ø–æ¬≠–º–µ¬≠—Ç–∞–º, –∑–∞¬≠—Ç–µ–º —Ç—É¬≠—à–µ¬≠–≤—ã–º –ø—Ä–∏–∑–ΩaÃÅ–∫–∞–º, —á—Ç–æ –Ω—ã¬≠–Ω–µ –ø–æ¬≠–∑–≤–æ¬≠–ª—è¬≠–µ—Ç —Ä–∞—Å¬≠—à–∏—Ñ¬≠—Ä–æ¬≠–≤—ã¬≠–≤–∞—Ç—å –∑–≤—É¬≠–∫–æ¬≠–≤—ã¬≠—Å–æ—Ç¬≠–Ω—É—é –ª–∏¬≠–Ω–∏—é. –†–∞–∑¬≠–ª–∏¬≠—á–∞¬≠—é—Ç –±–µ—Å¬≠–ø–æ¬≠–º–µ—Ç¬≠–Ω—ã–µ, –ø–æ¬≠–º–µ—Ç¬≠–Ω—ã–µ, –æ–¥¬≠–Ω–æ¬≠–≤—Ä–µ¬≠–º–µ–Ω¬≠–Ω–æ –ø–æ¬≠–º–µ—Ç¬≠–Ω—ã–µ –∏ –ø—Ä–∏¬≠–∑–Ω–∞—á¬≠–Ω—ã–µ –∫—Ä—é¬≠–∫–æ¬≠–≤—ã–µ —Ä—É¬≠–∫–æ¬≠–ø–∏¬≠—Å–∏.")
});


bot.on("callback_query", (ctx) => {
  const userId = ctx.from.id;
  const buttonData = ctx.callbackQuery.data;

  Lesson_1(ctx, buttonData)

  if (buttonData === "lessons") {
    return ctx.reply("–ó–¥–µ—Å—å –∏–º–µ–µ—Ç—Å—è –º–Ω–æ–≥–æ —É—Ä–æ–∫–æ–≤, –ø—Ä–æ–π–¥—è –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–∑–Ω–∞–µ—Ç–µ –º–Ω–æ–≥–æ –∫—Ä—é–∫–æ–≤. –ü—Ä–æ—Ö–æ–¥–∏ –ø–æ —É—Ä–æ–∫—É –≤ –¥–µ–Ω—å –∏ —Ç—ã —É–≤–∏–¥–∏—à—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç!!!üéºüéπüé§", {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "–£—Ä–æ–∫ 1", callback_data: "lesson_1" },
            { text: "–£—Ä–æ–∫ 2", callback_data: "button_test" }
          ],
          [
            { text: "–£—Ä–æ–∫ 3", callback_data: "button_test" },
            { text: "–£—Ä–æ–∫ 4", callback_data: "button_test" }
          ],
          [
            { text: "–£—Ä–æ–∫ 5", callback_data: "button_test" },
            { text: "–£—Ä–æ–∫ 6", callback_data: "button_test" }
          ]
        ],
      },
    });
  }

  if (buttonData === "button_test") {
    return ctx.reply("–ó–¥–µ—Å—å –∏–º–µ–µ—Ç—Å—è –º–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤!! –ü—Ä–æ—Ö–æ–¥–∏ –∏—Ö —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –∫–∞–∫ —Ö–æ—Ä–æ—à–æ —Ç—ã –∑–Ω–∞–µ—à—å –∫—Ä—é–∫–∏)üéºüéº", {
      reply_markup: {
        inline_keyboard: [[{ text: "–¢–µ—Å—Ç 1", callback_data: "test_1" },{ text: "–¢–µ—Å—Ç 2", callback_data: "test_2" }]],
      },
    });
  }

  if (buttonData === "true_answer") {
    userProgress[userId].numTrueAnswer++;
    userProgress[userId].progress++;
    if (userProgress[userId].progress < baza.length) {
      ctx.reply("–ü—Ä–∞–≤–∏–ª—å–Ω–æ!!üòÉ");
    }
  }

  if (
    buttonData === "false_2" ||
    buttonData === "false_3" ||
    buttonData === "false_4"
  ) {
    userProgress[userId].progress++;
    if (userProgress[userId].progress < baza.length) {
      ctx.reply("–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æüòû");
    }
  }

  if (buttonData === "test_1") {
    if (!userProgress[userId]) {
      userProgress[userId] = {
        progress: 0,
        numTrueAnswer: 0,
      };
    }

    userProgress[userId].progress = 0;
    userProgress[userId].numTrueAnswer = 0;
  }

  if (
    buttonData === "false_2" ||
    buttonData === "false_3" ||
    buttonData === "false_4" ||
    buttonData === "test_1" ||
    buttonData === "true_answer"
  ) {
  if (userProgress[userId].progress < baza.length) {
    sendQuestion(ctx, userId);
  } else {
    ctx.reply("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!");

    saveTestResult(userId, userProgress[userId].numTrueAnswer);

    if (
      userProgress[userId].numTrueAnswer >= 0 &&
      userProgress[userId].numTrueAnswer <= 4
    ) {
      ctx.reply(
        `–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ ${userProgress[userId].numTrueAnswer} –∏–∑ ${baza.length}`
      );
      ctx.replyWithSticker(answerStik.id_0_4);
    } else if (
      userProgress[userId].numTrueAnswer >= 5 &&
      userProgress[userId].numTrueAnswer <= 7
    ) {
      ctx.reply(
        `–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ ${userProgress[userId].numTrueAnswer} –∏–∑ ${baza.length}`
      );
      ctx.replyWithSticker(answerStik.id_5_7);
    } else if (
      userProgress[userId].numTrueAnswer >= 8 &&
      userProgress[userId].numTrueAnswer <= 9
    ) {
      ctx.reply(
        `–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ ${userProgress[userId].numTrueAnswer} –∏–∑ ${baza.length}`
      );
      ctx.replyWithSticker(answerStik.id_8_9);
    } else if (userProgress[userId].numTrueAnswer == 10) {
      ctx.reply(
        `–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ ${userProgress[userId].numTrueAnswer} –∏–∑ ${baza.length}`
      );
      ctx.replyWithSticker(answerStik.id_10);
    }
    delete userProgress[userId];
  }
}}
);

function sendQuestion(ctx, userId) {
  const question = baza[userProgress[userId].progress];
  const answer = [
    [
      { text: question.answer[2], callback_data: "false_3" },
      { text: question.answer[3], callback_data: "false_4" },
    ],
    [
      { text: question.answer[0], callback_data: "true_answer" },
      { text: question.answer[1], callback_data: "false_2" },
    ],
  ];
  const mixer0 = shuffle(answer[0]);
  const mixer1 = shuffle(answer[1]);
  const answers = [
    mixer0,
    mixer1
  ];
  const mixer = shuffle(answers);
  ctx.replyWithSticker(question.sticker);
  setTimeout(() => {
    ctx.reply(question.text, {
      reply_markup: {
        inline_keyboard: mixer,
      },
    });
  }, 300);
}

(async () => {
  await connectDB();
  bot.launch();
  console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
})();
